int[] nums =
{
    65025, 312481, 107584, 148996, 322624, 194481, 570025, 15376, 123904, 848241, 88804, 47961, 117649, 66564, 295936,
    271441, 16900, 474721, 27556, 285156, 11236, 175561, 917764, 968256, 16, 38025, 312481, 426409, 354025, 8464,
    522729, 60516, 210681, 378225, 638401, 101124, 697225, 427716, 262144, 940900, 988036, 324900, 151321, 309136,
    178929, 168921, 189225, 4, 301401, 659344, 786769, 964324, 15625, 302500, 56644, 61504, 31684, 369664, 345744,
    19321, 59049, 5041, 40000, 147456, 372100, 708964, 171396, 214369, 707281, 484, 49729, 82944, 100489, 103684, 58564,
    208849, 946729, 84100, 4, 600625, 334084, 683929, 9604, 245025, 97969, 147456, 160801, 434281, 223729, 294849,
    166464, 432964, 518400, 376996, 17424, 315844, 256, 737881, 10000, 632025
};

Console.WriteLine(MaximumLength(nums));

int MaximumLength(int[] nums)
{
    var ones = nums.Count(x => x == 1);
    var res = Math.Max(1, ones % 2 == 0 ? ones - 1 : ones);
    var freq = nums.GroupBy(x => x).Where(x => x.Key != 1).ToDictionary(x => x.Key, x => x.Count());
    foreach (var num in freq.Keys)
    {
        if (freq[num] == 1) continue;
        int temp = num, count = 0;
        while (freq.ContainsKey(temp))
        {
            count += 2;
            if (freq[temp] == 1)
                break;
            temp *= temp;
        }
        count--;
        res = Math.Max(res, count);
    }
    return res;
}